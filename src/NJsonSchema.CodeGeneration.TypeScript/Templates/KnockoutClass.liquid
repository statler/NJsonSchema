{% if HasDescription -%}
/** {{ Description }} */
{% endif -%}

{% for reference in References -%}
import * as {{ reference.ReferenceName }} from './{{ reference.ClassName }}'
{% endfor -%}

export interface I{{ ClassName }}{{ InterfaceInheritance }} {
{%   for property in Properties -%}
{%       if property.HasDescription -%}
    /** {{ property.Description }} */
{%       endif -%}
    {{ property.PropertyName }}{% if property.IsOptional and property.IsPrimitive == false %}?{% endif %}: {{ property.ReferencedConstructorInterfaceType }};
{%   endfor -%}
{%   if HasIndexerProperty -%}
    [key: string]: {{ IndexerPropertyValueType }}; 
{%   endif -%}
}

{% if HasRequiredValue -%}
export interface I{{ ClassName }}{{ InterfaceInheritance }}Id {
    {{ FirstRequiredValue.PropertyName }}{% if FirstRequiredValue.IsOptional %}?{% endif %}: {{ FirstRequiredValue.ConstructorInterfaceType }};
{%   endif -%}
}

export class {{ ClassName }}{{ Inheritance }} {
{% for property in Properties -%}
{%     if property.HasDescription -%}
    /** {{ property.Description }} */
{%     endif -%}
    {% if property.IsReadOnly %}readonly {% endif %}{{ property.PropertyName }} = {% if property.IsArray %}ko.observableArray<{{ property.ArrayItemType }}>({% if property.HasDefaultValue %}{{ property.DefaultValue }}{% endif %}){% else %}ko.observable<{{ property.ReferencedClassType }}>(){% endif %};
{% endfor -%}

{% if HasDiscriminator -%}
    protected _discriminator: string;

{% endif -%}

{% if HasBaseDiscriminator -%}
    constructor() {
{%     if HasInheritance -%}
        super();
{%     endif -%}
        this._discriminator = "{{ DiscriminatorName }}";
    }

{% endif -%}
{% if HasRequiredValue -%}
    constructor(data?: I{{ ClassName }}{{ InterfaceInheritance }} | I{{ ClassName }}{{ InterfaceInheritance }}Id) {
		if (data) this.fromJS(<any> data);
    }
{% else -%}
    constructor(data?: I{{ ClassName }}{{ InterfaceInheritance }}) {
		if (data) this.fromJS(<any> data);
    }
{%   endif -%}

    toJS() {
        return <I{{ ClassName }}{{ InterfaceInheritance }}> {
{% assign iterLimit = Properties_Primitive.size | minus: 1 -%}
{% for property in Properties_Primitive limit: iterLimit -%}
        {{ property.PropertyName }} : this.{{ property.PropertyName }}(),
{% endfor -%}
        {{ Properties_Primitive.last.PropertyName }} : this.{{ Properties_Primitive.last.PropertyName }}()
        }
    }

    fromJS(data: I{{ ClassName }}): {
        if (!data) return;
{% for property in Properties_Primitive -%}
        this.{{ property.PropertyName }}(data.{{ property.PropertyName }});
{% endfor -%}
{% for property in Properties_Complex -%}
{%      if property.IsArray %}
        if (data.{{ property.PropertyName }} && data.{{ property.PropertyName }}.constructor === Array) {
            {{ property.PropertyName }}_ = [];
            for (let item of data.{{ property.PropertyName }})
                {{ property.PropertyName }}_.push({{ property.ReferencedClassType }}.fromJS(item));
        }
{%      else -%}
        if (data.{{ property.PropertyName }}) this.{{ property.PropertyName }}(new {{ property.ReferencedClassType }}(data.{{ property.PropertyName }}));
{%      endif -%}
{% endfor -%}
    }

    	clear() {
{% for property in Properties -%}
        this.{{ property.PropertyName }}(undefined);
{% endfor -%}
	}

}